version: "3.3"

networks:
  my_network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - my_network
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my_network
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 10s
      timeout: 5s
      retries: 3

  producer-logs:
    build:
      context: .
      dockerfile: ./producer-logs/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - my_network

  consumer-logs:
    build:
      context: .
      dockerfile: ./consumer-logs/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - my_network

  producer-sensors:
    build:
      context: .
      dockerfile: ./producer-sensors/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - my_network

  consumer-sensors:
    build:
      context: .
      dockerfile: ./consumer-sensors/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - my_network

  producer-transactions:
    build:
      context: .
      dockerfile: ./producer-transactions/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - my_network

  consumer-transactions:
    build:
      context: .
      dockerfile: ./consumer-transactions/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - my_network

  mongo:
    image: mongo:latest
    ports:
      - 27017:27017
    networks:
      - my_network

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - my_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    environment:
      # - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    networks:
      - my_network
    depends_on:
      - prometheus

volumes:
  grafana-storage:
